f <- function(formula, data)
{fit <- glm(formula, data, family="binomial"); list(fit,formula)}
x <- f(sale_Price ~ ., data=big.ames)
f <- function(formula, data)
{fit <- glm(formula, data, family="binomial"); list(fit,formula)}
x <- f(sale_Price ~ ., data=ames)
x <- f(Sale_Price ~ ., data=ames)
class(x)
x
x[[1]]
big.rec <-  recipe(Sale_Price ~ .,
data = big.ames)
?update_role
big.ames[1,]
big.rec <- recipe(big.ames) %>%
update_role(everything(), new_role, "predictor") %>%
update_role(Sale_Price, new_role, "outcome")
big.rec <- recipe(big.ames) %>%
update_role(everything(), new_role="predictor") %>%
update_role(Sale_Price, new_role="outcome")
big.rec
big.rec$term_info
rec$term_info
library(parallel)
parallel::dectectCores()
detectCores()
detectCores
ncores <- floor(detectCors() * 0.5)
ncores <- floor(detectCores() * 0.5)
ncore
ncores
library(parallel)
?parLapply
factorize(13344)
install.packages("sfsmisc")
library(sfsmisc)
factorize(13344)
factorize(13343434243)
factorize(13343434)
factorize(1334343)
seed(1234)
rseed(1234)
set.seed(134)
1334343/3/157/2833
factorize(13343433)
factorize(13343434)
system.time(sapply(1:1000, function(i) {factorize(13343434); 0}))
system.time(sapply(1:10000, function(i) {factorize(13343434); 0}))
set.seed(1234)
library(parallel)
library(sfsmisc)
ncores <- floor(detectCores() * 0.5)
cl <- makePSOCKcluster(ncores)
qc <- function(n) {
sapply(1:10000, function(i) {factorize(13343434); 0})
n
}
system.time(x <- lapply(1:10, qc))
system.time(x <- parLapply(cl, 1:10, qc))
stopCluster(cl)
set.seed(1234)
library(parallel)
library(sfsmisc)
ncores <- floor(detectCores() * 0.5)
cl <- makePSOCKcluster(ncores)
qc <- function(n) {
library(sfsmisc)
sapply(1:10000, function(i) {factorize(13343434); 0})
n
}
system.time(x <- lapply(1:10, qc))
system.time(x <- parLapply(cl, 1:10, qc))
stopCluster(cl)
?split
seq_along
?seq_along
seq(1,10,length.out=20)
rep(1:10,3)
sort(sample(1:10, size=20, replace=T))
sort(sample(1:10, size=20, replace=T))
sort(sample(1:10, size=20, replace=T))
sort(sample(1:10, size=20, replace=T))
sort(sample(1:10, size=20, replace=T))
seq(10 %% 200)
seq(1,53)%%10
seq(10)
seq(10)-1
(seq(10)-1) %% 3
seq(11) %% 3
sort(seq(11) %% 3)
samplesheet <- data.frame(a=1:21, b=2:22)
ncores <- 5
x <- split(samplesheet, sort(seq(nrow(samplesheet)-1) %% ncores))
sapply(x, nrow)
nrow(samplesheet)
sum(sapply(x, nrow))
x <- list(x=list(1:3), y=list(4:9))
x
x <- list(x=list(a=1:3, b="3423423", c=list(1:3)), y=list(a=4:9, b="48383", c=list(4:9)))
x
do.call("c", x)
y <- do.call("c", x)
length(y)
x
length(x)
sapply(x, length)
y[[1]]
y[[2]]
y[[3]]
x <- c(x,x)
length(x)
x[[1]]
x[[2]]
x[[3]]
x <- list(x=x, y=x)
length(x)
sapply(x, length)
y <- do.call(c, x)
length(y)
split(1:10, sort((seq(10)-1) %% 3)
)
z <- split(y, sort((seq(length(y))-1) %% 3))
length(z)
sapply(z, length)
length(y)
?parLapply
x <- rnorm(1000)
y <- rnorm(1000)
cor(x,y)
x <- rnorm(1000)
y <- rnorm(1000) + x
cor(x,y)
cor(x,y)^2
summary(lm(y~x))
?binom.test
power.t.test(delta=0.05, sd=0.2, power=0.8, sig.level=0.05/485000)
power.t.test(delta=0.05, sd=0.1, power=0.8, sig.level=0.05/485000)
power.t.test(delta=0.05, sd=0.1, n=300, sig.level=0.05/485000)
?aggregate
probes <- data.frame(symbol=sample(c("a","b","c","d"), size=100, replace=T), id=sample(paste0("p",1:100),size=100, replace=F),stringsAsFactors=F)
dat <- matrix(rnorm(100*50), ncol=50, nrow=100)
rownames(dat) <- paste0("p",1:100)
## there are multiple probes per gene, we want the average for each sample
stopifnot(all(rownames(dat) %in% probes$id))
probes <- probes[match(rownames(dat), probes$id),]
genes <- unique(probes$symbol)
dat.avg <- sapply(genes, function(gene) {
apply(dat[probes$symbol == gene,],2,mean,na.rm=T)
})
dat.avg <- t(dat.avg)
design <- model.matrix(~0+symbol, probes)/ncol(dat)
dat.avg2 <- t(design) %*% dat
quantile(dat.avg-dat.avg2[paste0("symbol", rownames(dat.avg)),])
idx <- which(rownames(dat) == "a")
idx
idx <- which(probes$symbol=="a")
idx
colMeans(dat[idx,])
dat.avg["a",]
dat.avg2["symbola",]
quantile(dat.avg-2*dat.avg2[paste0("symbol", rownames(dat.avg)),])
library(matrixStats)
dat.avg2 <- sapply(genes, function(gene) {
rowMeans(dat[probes$symbol == gene,], na.rm=T)
})
dat.avg2 <- t(dat.avg)
quantile(dat.avg-dat.avg2)
dat.avg2 <- sapply(genes, function(gene) {
rowMeans(dat[probes$symbol == gene,], na.rm=T)
})
dat.avg2 <- t(dat.avg2)
quantile(dat.avg-2*dat.avg2[paste0("symbol", rownames(dat.avg)),])
quantile(dat.avg-dat.avg2)
class(dat.avg)
class(dat.avg2)
dim(dat.avg)
dim(dat.avg2)
library(matrixStats)
dat.avg2 <- sapply(genes, function(gene) {
colMeans(dat[probes$symbol == gene,], na.rm=T)
})
dat.avg2 <- t(dat.avg2)
quantile(dat.avg-dat.avg2)
?by
x <- by(dat, as.factor(genes), colMeans)
x <- by(dat, as.factor(probes$symbol), colMeans)
class(x)
names(x)
sapply(x, length)
y <- as.matrix(x)
dim(y)
class(x)
identity
dat.avg3 <- sapply(dat.avg3, identity)
dat.avg3 <- by(dat, as.factor(probes$symbol), colMeans)
dat.avg3 <- sapply(dat.avg3, identity)
dim(dat.avg3)
dim(dat.avg)
dat.avg3 <- by(dat, as.factor(probes$symbol), colMeans)
dat.avg3 <- do.call(rbind, dat.avg3)
dim(dat.avg3)
quantile(dat.avg3-dat.avg2)
dim(dat.avg3)
dim(dat.avg2)
dat.avg3[,1:5]
dat.avg2[,1:5]
genes <- sort(unique(probes$symbol))
dat.avg <- sapply(genes, function(gene) {
apply(dat[probes$symbol == gene,],2,mean,na.rm=T)
})
dat.avg <- t(dat.avg)
## option 2
library(matrixStats)
dat.avg2 <- sapply(genes, function(gene) {
colMeans(dat[probes$symbol == gene,], na.rm=T)
})
dat.avg2 <- t(dat.avg2)
quantile(dat.avg-dat.avg2)
## option 3
dat.avg3 <- by(dat, as.factor(probes$symbol), colMeans)
dat.avg3 <- do.call(rbind, dat.avg3)
quantile(dat.avg-dat.avg3)
library(journalclub)
x <- journalclub.annotate(c("30863553","31552803","31779622"))
dim(x)
x[1,]
library(devtools)
install_github("perishky/journalclub")
q()
library(devtools)
install_github("perishky/journalclub")
x <- journalclub.annotate(c("30863553","31552803","31779622"))
library(journalclub)
x <- journalclub.annotate(c("30863553","31552803","31779622"))
getwd()
x <- read.csv("./GitHub/perishky.github.io/r/introduction/bmi.csv")
dat <- x
x[1:5,]
dim(x)
mean(dat$bmi)
summary(dat)
summary(dat$bmi)
plot(bmi, age, dat)
dat[1,]
plot(bmi, age, data=dat, pch=19)
plot(dat$bmi, dat$age, pch=19)
plot(dat$age, dat$bmi, pch=19)
dat$bmi <- scale(dat$age) + 27 + rnorm(nrow(dat))
plot(dat$age, dat$bmi, pch=19)
write.csv(dat, file="./GitHub/perishky.github.io/r/introduction/bmi.csv", row.names=F)
dat <- read.csv("./GitHub/perishky.github.io/r/introduction/bmi.csv")
dim(dat)
dat[1:10,]
dat[1,]
plot(desnity(dat$age))
hist(dat$age)
mean(dat$age)
dat$bmi <- 27 + scale(dat$age) + sign(dat$sex == "M") + dat$diet + rnorm(nrow(dat))
dat$bmi
dat$bmi <- NULL
dat[1:5,]
write.csv(dat, file="./GitHub/perishky.github.io/r/introduction/samples.csv", row.names=F)
dat$bmi <- 27 + scale(dat$age) + sign(dat$sex == "M") + dat$diet + rnorm(nrow(dat))
write.csv(dat, file="./GitHub/perishky.github.io/r/introduction/bmi.csv", row.names=F)
quantile(dat$bmi)
mean(dat$age)
quantile(dat$age)
mean(dat$bmi[dat$age >= 25 & dat$age <= 34])
mean(dat$bmi[dat$age >= 35 & dat$age <= 44])
mean(dat$bmi[dat$age >= 45 & dat$age <= 55])
mean(dat$bmi[dat$age >= 25 & dat$age <= 34 & dat$sex == "M"])
mean(dat$bmi[dat$age >= 25 & dat$age <= 34 & dat$sex == "F"])
mean(dat$bmi[dat$age >= 35 & dat$age <= 45 & dat$sex == "F"])
mean(dat$bmi[dat$age >= 35 & dat$age <= 44 & dat$sex == "M"])
lm(bmi ~ sex + age + diet, data=dat)
coef(summary(lm(bmi ~ sex + age + diet, data=dat))
)
sign(dat$sex == "M")
dat[1:5,]
dat[1:10,]
dat$bmi
class(dat)
class(dat$bmi)
dat <- read.csv(dat, file="./GitHub/perishky.github.io/r/introduction/bmi.csv")
dat <- read.csv("./GitHub/perishky.github.io/r/introduction/bmi.csv")
dat[1:5,]
dat$bmi
dat$bmi[1:5]
dat[5,]
mean(dat$bmi)
median(dat$bmi)
sd(dat$bmi)
min(dat$bmi)
max(dat$bmi)
quantile(dat$bmi, probs=0.25)
table(dat$sex)
summary(dat$bmi)
summary(dat)
cor(dat$bmi, dat$age)
fit <- lm(bmi~age, data=dat)
fit
plot(dat$age, dat$bmi, pch=19)
abline(fit,col="red", lwd=3)
17.6770+0.3118*29
17.6770+41*0.3118
summary(fit)
fit <- lm(bmi ~ age + sex + diet, data=dat)
summary(fit)
coef(fit)
coef(summary(fit))
coef(summary(fit))["age","Estimate"]
summary(fit)$coefficients
summary(fit)$adj.r.squared
names(summary(fit))
fit <- lm(bmi ~ age + sex + diet, data=dat)
plot(dat$age, dat$bmi, main="age vs BMI", xlab="age", ylab="BMI")
fit <- lm(bmi~age, data=dat)
abline(fit, col="red", lwd=3)
plot(dat$age, dat$bmi, main="age vs BMI", xlab="age", ylab="BMI")
hist(dat$bmi)
hist(dat$bmi, main="BMI")
boxplot(bmi ~ diet, data=dat)
png(filename="boxplot.png", width=10, height=10, units="cm", res=500)
boxplot(bmi~diet, data=dat)
dev.off()
install.packages("rmarkdown")
help("Hmisc")
help("Hmisc")
help(Hmisc)
install.packages("Hmisc")
help(Hmisc)
help("Hmisc")
library(Hmisc)
help("Hmisc")
help(Hmisc)
help(ggplot2)
help(markdown)
library(markdown)
q()
n
install.packages("markdown")
library(markdown)
library(Hmiscr)
help(Hmisc)
help(rmarkdown)
! 3 < 2
3 < 2
m <- cbind(a=c(1,3,5), b=c(2,2,6))
m
t(m)
solve(m)
m <- cbind(c1=c(1,3,5), c2=c(2,2,6), c3=c(3,1,7))
m
t(m)
solve(m)
m <- cbind(c1=c(1,3,5), c2=c(2,2,6), c3=c(3,1,4))
solve(m)
m <- cbind(c1=c(1,3,5), c2=c(2,2,6), c3=c(3,1,4))
t(m)
m <- cbind(c1=c(1,3,5), c2=c(2,2,6), c3=c(3,1,4))
m
t(m)
solve(m)
m *%* solve(m)
m %*% solve(m)
colnames(m)
rownames(m)
dim(m)
euclidean.norm <- function(x) {
res <- x^2
res <- sqrt(res)
return(res)
}
euclidean.norm(c(2,3))
euclidean.norm <- function(x) {
res <- sqrt(sum(x^2))
return(res)
}
euclidean.norm(c(2,3,5))
euclidean.norm(c(2,3,6))
euclidean.norm(c(2,3,6,9))
euclidean.norm(c(2,3,6,10))
euclidean.norm(c(2,3,6,11))
euclidean.norm(c(2,3,6,12))
euclidean.norm(c(2,3,6,13))
euclidean.norm(c(2,3,6,14))
euclidean.norm(c(2,3,6,15))
sapply(1:100, function(x) euclidean.norm(c(2,3,6,x)))
sapply(1:100, function(x) euclidean.norm(c(2,3,6,100+x)))
sapply(1:100, function(x) euclidean.norm(c(2,3,6,200+x)))
sapply(1:100, function(x) euclidean.norm(c(2,3,6,300+x)))
sapply(1:100, function(x) euclidean.norm(c(2,3,6,400+x)))
sapply(1:100, function(x) euclidean.norm(c(2,3,6,500+x)))
sapply(1:100, function(x) euclidean.norm(c(2,3,x)))
sapply(1:100, function(x) euclidean.norm(c(2,3,100+x)))
sapply(1:100, function(x) euclidean.norm(c(2,3,100+x)))
sapply(1:100, function(x) euclidean.norm(c(2,4,x)))
sapply(1:100, function(x) euclidean.norm(c(1,4,x)))
euclidean.norm(c(1,4,8))
euclidean.norm(c(3,4))
library(Hmisc)
Cs(a,cat,dog)
describe(1:5)
summary(1:5)
describe(c(1,1,2,1,3,5,1,3,5,2,3,4))
x <- readLines("C:\Users\ms13525\Downloads\pubmed-suderman-set.txt")
x <- readLines("C:/Users/ms13525/Downloads/pubmed-suderman-set.txt")
length(x)
x <- x[grep("PMID", x)]
length(x)
x[1:5]
x <- sub("PMID- ", "", x)
x[1:5]
writeLines(x, con="C:/Users/ms13525/Downloads/pubmed.txt")
x[1:20]
x <- readLines("C:/Users/ms13525/Downloads/pubmed-suderman-set.txt")
x <- x[grep("PMID- ", x)]
x <- sub("PMID- ", "", x)
length(x)
x[1:5]
writeLines(x, con="C:/Users/ms13525/Downloads/pubmed.txt")
paste(x[1:20], collapse=",")
paste(x[-(1:20)], collapse=",")
paste(21:60, collapse=",")
paste(x[21:60], collapse=",")
paste(x[61:length(x)], collapse=",")
x <- "x,y,z
1,2,F
3,4,F
5,6,F
7,8,F
9,9,F""
9,9,F""
x
x <- "x,y,z
1,2,F
3,4,F"
y <- read.csv(text=x)
y
y$z
?read.csv
read.csv
read.table
type.convert
type.convert(c("F","F","F"))
?type.convert
type.convert
y
y$z
is.logical(y$z)
is.logical(c(y$z,NA))
apply(y, 2, is.logical)
as.character(y$z)
as.character(c(y$z,NA)
)
as.character(NA)
class(as.character(NA))
is.na(as.character(NA))
substring(as.character(c(y$z,NA)), 1,1)
5+2+0.6+0.15
5/7.75
2/7.75
0.6/7.75
0.15/7.75
counts <- c(gran=0.6, mono=0.1, cd4t=0.12, cd8t=0.1, bcell=0.03, nkt=0.05)
sum(counts)
m <- matrix(counts, ncol=length(counts), nrow=4, byrow=T)
m
colnames(m) <- names(counts)
m
rownames(m) <- c("sample1", "sample2", "sample3", "sample4")
new <- m
old <- m
new
old
rnorm(length(old), sd=0.1)
rnorm(length(old), sd=0.01)
old <- old + rnorm(length(old), sd=0.02)
odl
old
old[,"gran"] <- 1-rowSums(old[,-1])
old
rowSums(old)
colsums(old)
colSums(old)
old
new
library(matrixStats)
rowCors(old, new)
rowCor
sapply(rownames(old), function(s) cor(old[s,], new[s,]))
sapply(colnames(old), function(t) cor(old[,t], new[,t]))
library(devtools)
install_github("perishky/meffil")
library(knitr)
kable
setwd("C:/Users/ms13525/OneDrive - University of Bristol/Documents/GitHub/perishky.github.io/jc/20201026")
library(readxl)
x <- read_xlsx("ewas.xlsx")
list.files()
x <- read_xlsx("ewas.xlsx")
x[1,]
dim(x)
x <- as.data.frame(x)
x
kable(x)
x <- read_xlsx("ewas.xlsx")
x <- as.data.frame(x)
kable(x)
?kable
options(knitr.kable.NA = '')
kable(x)
